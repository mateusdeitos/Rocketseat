*MITOS E VERDADES DO TYPESCRIPT*
 - Typescript diminui a produtividade
 - Typescript é transformar JavaScript em Java ou C#
 - Typescript não é utilizado pelo mercado: Mercado cada vez mais usa o Typescript
 - Typescript substitui o JS por completo: Não, o Typescript é convertido para JS quando for executado no browser
 - Typescript atrapalha quem é iniciante: Depende, se já está acostumado com a tipagem dinâmica, pode atrapalhar no início

* AULA 1

*** NODE

** COMANDOS
* 'mkdir server'
* 'npm init -y'
    *** Cria o package.json
* 'npm install express'
    *** Dependência que irá lidar com as rotas da API. Exemplo: localhost:3000/users
    *** Irá criar o node_modules (armazena as dependências), pois foi instalada uma Dependência
        ** Várias dependências serão instaladas juntos, pois o 'express' também possui dependências
    *** Irá criar o package-lock.json (Arquivo de cache, não precisa modificar)
* 'mkdir src' dentro de /server
* criar arquivo server.ts dentro de /src
* ao importar o express com Typescript, os types não são importados, é preciso importar manualmente
    *** npm install @types/express -D
        ** '-D' é uma DevDependecy
        ** É importada como -D pois quando o app for para produção, os types não são necessários
* Instalar o Typescript
    *** npm install typescript -D
* Criar arquivo de configuração do Typescript
    *** npx tsc --init
* Instalar TS Node para conseguir iniciar o Node com Typescript
    *** npm install ts-node -D
        ** node só entende JS, por isso é necessário essa dependência
    *** npx ts-node src/server.ts
        ** npx serve para executar o pacote instalado
        ** Não irá acontecer nada, vai ficar rodando
* Instalar ts-node-dev para não precisar reiniciar o ts-node toda vez que atualizar o código
    *** npm install ts-node-dev -D

* Criar script dentro de package.json chamado 'dev' para não precisar digitar 'npx ts-node-dev src/server.ts'
** -----------------------------------------------------------------------------------------------
*** REACT

** COMANDOS

* Iniciar o projeto REACT   
    *** npx create-react-app <nome_app> --template=typescript

* Para rodar o REACT
    *** npm start (roda o script start dentro de package.json)
** -----------------------------------------------------------------------------------------------
*** REACT NATIVE

* Será utilizado o EXPO para desenvolver em REACT NATIVE
    *** É um app instalado no celular para facilitar o desenvolvimento para Android e iOS

* AULA 2

*** COMANDOS para APIs

    * Funcionalidades do App:
        *** Cadastro de pontos de coleta
        *** Lista os itens de coleta
        *** Listar pontos (filtro por UF, cidade e itens)
        *** Listar um único ponto de coleta

    * Instalar o knex.js
        *** npm install knex

    * Instalar o SQLite3
        *** npm install sqlite3
    
    * Instalar o CORS
        *** npm install cors
        *** npm install @types/cors -D

    * Utilizar biblioteca path do node para lidar com caminhos e unificar caminhos entre diferentes S.Os
        *** exemplo: path.resolve(__dirname, 'database.sqlite')

    * Tabelas do DB:
        *** points (Pontos de Coleta) (N-N)
            ** name
            ** image
            ** email
            ** whatsapp
            ** latitude
            ** longitude
            ** city
            ** uf
        *** items (itens para coleta) (N-N)
            ** title
            ** image
        *** point_items (Tabela pivot para relacionar tabelas points e items)
            ** point_id
            ** item_id

    * Migrations do DB: Histórico do banco de dados
        *** Criar pasta migrations dentro de src/database
        *** CUIDADO: A ordem que as migrations estiverem na pasta será a ordem de execução, então cuidar caso alguma tabela tenha que ser criada antes
        *** Nomenclatura das migratons: <int>_<operacao>_<tabela>.ts, Exemplo: 00_create_points.ts
        *** import Knex from "knex";
        *** Dentro das migrations criar 2 export async functions up(knex: Knex) e down(knex: Knex)
            ** up() => Executa operação
            ** down() => Realiza a operação contrária do up()
        *** Executar as migrations:
            ** Criar um arquivo na pasta server: knexfile.ts
            ** fazer o module.exports do client, connection e migrations
            ** se posicionar na pasta server
            ** rodar: npx knex migrate:latest --knexfile knexfile.ts
                ** Esse comando irá executar todas migrations dentro da pasta
        *** criar script dentro de package.json
            ** "knex:migrate": "npx knex --knexfile knexfile.ts migrate:run"
    
    * SeedService: Seed para popular tabela de itens ao iniciar app
        *** Criar pasta seed dentro de database
        *** Criar arquivo create_items.ts
            ** O arquivo deve possuir uma export async function
            ** utilizar comando knex(<tabela>).insert([
            **    {Objeto 1},
            **    {Objeto 2},
            **    {Objeto 3},
            **    {Objeto 4},
            **    {Objeto n},
            ** ])
        *** Inserir dentro de knexfile.ts:
            ** seeds:{directory... blablabla}
        *** criar script dentro de package.json
            ** "knex:seed": "npx knex --knexfile knexfile.ts seed:run"
    * Imagens
        *** Criar pasta ./uploads e passar imagens para essa pasta
        *** Criar rota para uploads dentro de server
            ** app.use('/uploads, express.static(
            ** path.resolve(__dirname, '..', 'uploads')
            ** ))

    * Padrão de nomenclatura dos métodos das Classes:
        ** index: Listagem
        ** show: Listar 1
        ** create: Inserir
        ** update: Atualizar
        ** delete remover
    ** __dirname retorna a pasta atual do arquivo aberto
    ** Rota: Endereço completo da requisição
    ** Recurso: Qual entidade estamos acessando do sistema
    ** Bancos SQL suportados: PostGres, MySQL, SQLite, SQL Server <-- Será utilizado um banco SQL para a NLW    
        *** Será utilizado o knex.js para operações com o DB (ao mudar de DB, as querys continuarão funcionando, pois serão feitas em JS)
        *** O banco a ser utilizado será SQLite
    ** Bancos NoSQL suportados: MongoDB, CouchDB

    * GET: Buscar uma ou mais informações do backend
    * POST: Criar uma nova informação no backend
    * PUT: Atualizar uma informação existente no backend
    * DELETE: Remover uma informação do backend

    *** Exemplo:

    ** POST http://localhost:3333/users => Criar um usuário
        * Request body: Parâmetros para criação/atualização de informações
            ** Para conseguir utilizar essa opção, usar => app.use(express.json());

    ** GET http://localhost:3333/users => Listar os usuários cadastrados

    ** GET http://localhost:3333/users/:id => Listar usuário específico buscando pelo ID
        * Para buscar o id informado na rota, é utilizado request.param.<atributo> dentro do api.get()
            ** Utilizar o Number(request.param.id) para converter para número

        * QueryParam é utilizado quando houver parâmetros opcionais na rota

    ** express.Routes() necessário para poder utilizar as rotas em outro arquivo






* AULA 3 - React
    *** Tudo que for repetido dentro do app deve ser criado em um componente .tsx
* Instalar pacote de ícones
    *** npm install react-icons
    *** npm install @types/react-icons -D

* Instalar biblioteca de rotas
    *** npm install react-router-dom

* Instalar react-leaflet para integrar o Mapa
    *** npm install leaflet react-leaflet
    *** npm install @types/react-leaflet -D
    *** Importar css do site leafletjs.com/examples/quick-start/
    *** Exemplo: https://github.com/PaulLeCam/react-leaflet/blob/master/example/components/simple.js

* Instalar axios para comunicar com a api node
    *** npm install axios

    ** div>ul>li*5 => Cria uma div com um ul e 5 li
    ** div#page-home => Cria <div id="page-home">
    ** div.content => Cria <div className="content">
    ** React.FC => FC: Function Component
    ** JSX: Sintaxe de XML dentro do JavaScript (.tsx)
    ** States são informações guardadas pelo componente
    ** useEffect é utilizado para executar uma função uma única vez
    ** sempre que criar estado para array ou objeto, é necessário
        ** informar manualmente o tipo da variável
        ** isso pode ser feito usando uma interface

* AULA 4 - React Native

* Instalar o Expo CLI
    *** npm install -g expo-cli
* Criar o projeto com Expo
    *** expo init mobile
* Executando projeto
    *** npm start
* Configurando Emulador
* Diferenças entre React Native para React JS
    ** Elementos
        *** Tudo é feito dentro de uma View
        *** Textos são inseridos através da tag <Text>
    ** Estilização
        *** Estilizações são feitas com a tag style
        *** valores dentro da StyleSheet devem ser entre aspas ''
        *** Não há como estilizar o texto dentro de uma View
        *** Cada elemento deve ter um estilo próprio
* Criando home
    *** Instalar fontes através do expo:
        *** expo install expo-font
        *** expo install expo-font @expo-google-fonts/ubuntu @expo-google-fonts/roboto
    *** Instalar o react navigation
        *** npm install @react-navigation/native
        *** expo install react-native-gesture-handler react-native-reanimated react-native-screens react-native-safe-area-context @react-native-community/masked-view
        *** npm install @react-navigation/stack
* Criando página do Mapa
    *** expo install react-native-maps
    *** expo install expo-constants
    *** expo install react-native-svg
    ** Ponto inicial é setado pela initialRegion
        *** latitude
        *** longitude
        *** latitudeDelta => zoom do mapa
        *** longitudeDelta => zoom do mapa
    *** mudar o localhost na URL das imagens no ItemController para o ip do expo para o celular poder enxergar o servidor
        ** exemplo: (exp://10.0.0.110:19000)
    *** expo install expo-location
    *** expo install expo-permissions

* Criando página do detalhe
    *** expo install expo-mail-composer

* Buscando itens da API
    *** npm install axios

* Buscando pontos da API
* Buscando detalhes do ponto da API
* Busca de UF e cidade

    ** Sempre que for exportar uma imagem para usar no app, exportar em 3 tamanhos, 1x, 2x e 3x
    ** operador condicional if-then => (condicao) && retorno
    ** KeyboardAvoidingView serve para evitar que o teclado cubra o input no iOS
    ** Ao abrir o teclado, caso os textos não se posicionem automaticamente, colocar eles dentro de uma View em branco